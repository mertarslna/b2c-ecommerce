// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  SELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  PAYTHOR
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  DELIVERY_ATTEMPTED
  CANCELED
  RETURNED
  LOST
}

// Main User Model with Role-based system
model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  first_name String
  last_name  String
  phone      String?
  role       UserRole @default(CUSTOMER)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations based on role
  admin_profile    AdminProfile?    @relation("UserAdmin")
  customer_profile CustomerProfile? @relation("UserCustomer") 
  seller_profile   SellerProfile?   @relation("UserSeller")
  
  // Common relations for all users
  addresses Address[]

  @@map("users")
}

// Separate profiles for different user types
model AdminProfile {
  id          String   @id @default(uuid())
  user_id     String   @unique
  permissions String[]
  last_login  DateTime

  // Relations
  user User @relation("UserAdmin", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model CustomerProfile {
  id             String @id @default(uuid())
  user_id        String @unique
  wishlist       Json   @default("[]")
  loyalty_points Int    @default(0)

  // Relations
  user      User       @relation("UserCustomer", fields: [user_id], references: [id], onDelete: Cascade)
  cart      Cart?
  orders    Order[]
  reviews   Review[]
  shippings Shipping[] @relation("CustomerShipping")

  @@map("customer_profiles")
}

model SellerProfile {
  id               String  @id @default(uuid())
  user_id          String  @unique
  business_name    String
  tax_number       String?
  is_verified      Boolean @default(false)
  business_address String? // Can store business address as text or link to Address

  // Relations
  user      User       @relation("UserSeller", fields: [user_id], references: [id], onDelete: Cascade)
  products  Product[]  @relation("SellerProducts")
  shippings Shipping[] @relation("SellerShippings")

  @@map("seller_profiles")
}

model Address {
  id            String  @id @default(uuid())
  user_id       String
  title         String
  first_name    String
  last_name     String
  company_name  String?
  address_line1 String
  address_line2 String?
  city          String
  state         String
  postal_code   String
  country       String
  phone         String?
  is_default    Boolean @default(false)

  // Relations
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipping_orders Order[]   @relation("ShippingAddress")
  billing_orders  Order[]   @relation("BillingAddress")
  shippings       Shipping[]

  @@map("addresses")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?
  parent_id   String?

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  seller_id   String   // Links to SellerProfile
  category_id String
  is_approved Boolean  @default(false)
  rating      Decimal? @default(0) @db.Decimal(3, 2)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  seller      SellerProfile @relation("SellerProducts", fields: [seller_id], references: [id], onDelete: Restrict)
  category    Category      @relation(fields: [category_id], references: [id], onDelete: Restrict)
  images      Image[]
  reviews     Review[]
  cart_items  CartItem[]
  order_items OrderItem[]

  @@map("products")
}

model Image {
  id          String   @id @default(uuid())
  product_id  String
  path        String
  size        Int?
  format      String?
  is_main     Boolean  @default(false)
  upload_date DateTime @default(now())

  // Relations
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("images")
}

model Review {
  id            String   @id @default(uuid())
  product_id    String
  customer_id   String   // Links to CustomerProfile
  order_id      String?
  rating        Int
  title         String?
  comment       String?
  pros          String[]
  cons          String[]
  is_verified   Boolean  @default(false)
  is_approved   Boolean  @default(false)
  helpful_count Int      @default(0)
  review_date   DateTime @default(now())
  created_at    DateTime @default(now())

  // Relations
  product  Product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  customer CustomerProfile @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  order    Order?          @relation(fields: [order_id], references: [id], onDelete: SetNull)

  @@map("reviews")
}

model Order {
  id                  String      @id @default(uuid())
  customer_id         String      // Links to CustomerProfile
  total_amount        Decimal     @db.Decimal(10, 2)
  status              OrderStatus @default(PENDING)
  order_date          DateTime    @default(now())
  shipping_address_id String
  billing_address_id  String
  created_at          DateTime    @default(now())

  // Relations
  customer         CustomerProfile @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  shipping_address Address         @relation("ShippingAddress", fields: [shipping_address_id], references: [id], onDelete: Restrict)
  billing_address  Address         @relation("BillingAddress", fields: [billing_address_id], references: [id], onDelete: Restrict)
  order_items      OrderItem[]
  payments         Payment[]
  reviews          Review[]
  shippings        Shipping[]

  @@map("orders")
}

model OrderItem {
  id           String    @id @default(uuid())
  order_id     String
  product_id   String
  quantity     Int
  unit_price   Decimal   @db.Decimal(10, 2)
  total_price  Decimal   @db.Decimal(10, 2)
  delivered_at DateTime?

  // Relations
  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@map("order_items")
}

model Cart {
  id           String   @id @default(uuid())
  customer_id  String   @unique // Links to CustomerProfile
  total_amount Decimal  @default(0) @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  customer   CustomerProfile @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  cart_items CartItem[]

  @@map("carts")
}

model CartItem {
  id            String   @id @default(uuid())
  cart_id       String
  product_id    String
  quantity      Int
  unit_price    Decimal  @db.Decimal(10, 2)
  selected_size String?  // ✅ 
  selected_color String? // ✅ 
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@map("cart_items")
}

model Payment {
  id             String        @id @default(uuid())
  order_id       String
  amount         Decimal       @db.Decimal(10, 2)
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transaction_id String?
  payment_date   DateTime      @default(now())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Shipping {
  id                      String         @id @default(uuid())
  order_id                String
  customer_id             String         // Links to CustomerProfile
  seller_id               String         // Links to SellerProfile
  shipping_address_id     String
  tracking_number         String?        @unique
  carrier                 String
  shipping_date           DateTime       @default(now())
  estimated_delivery_date DateTime?
  actual_delivery_date    DateTime?
  shipping_cost           Decimal        @db.Decimal(10, 2)
  status                  ShippingStatus @default(PENDING)
  last_status_update      DateTime       @default(now())

  // Relations
  order            Order           @relation(fields: [order_id], references: [id], onDelete: Cascade)
  customer         CustomerProfile @relation("CustomerShipping", fields: [customer_id], references: [id], onDelete: Restrict)
  seller           SellerProfile   @relation("SellerShippings", fields: [seller_id], references: [id], onDelete: Restrict)
  shipping_address Address         @relation(fields: [shipping_address_id], references: [id], onDelete: Restrict)

  @@map("shippings")
}